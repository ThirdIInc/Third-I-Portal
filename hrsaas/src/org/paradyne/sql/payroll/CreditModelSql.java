/**
 * 
 */
package org.paradyne.sql.payroll;

import org.paradyne.lib.SqlBase;

/**
 * @author MuzaffarS
 * 
 */
public class CreditModelSql extends SqlBase {
	public String getQuery(int id) {
		switch (id) {
		case 1:
			return " INSERT INTO HRMS_CREDIT_HEAD (CREDIT_CODE,CREDIT_NAME,CREDIT_ABBR,CREDIT_TYPE,CREDIT_PAYFLAG,CREDIT_APPLICABLE_ARREARS,CREDIT_FORMULA,CREDIT_TAXABLE_FLAG,CREDIT_PERIODICITY,CREDIT_PRIORITY,CREDIT_APPLICABLE_PTAX,CREDIT_APPLICABLE_ESI ,CREDIT_ISEXEMPT ,CREDIT_EXEMPT_INV_CODE,"
			+" CREDIT_HEAD_TYPE, CREDIT_IS_CTC_COMPONENT,CREDIT_APPLICABLE_LWF,CREDIT_MAXCAP ) "
					+ "VALUES((SELECT NVL(MAX(CREDIT_CODE),0)+1 FROM HRMS_CREDIT_HEAD ),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

		case 2:
			return " UPDATE HRMS_CREDIT_HEAD SET CREDIT_NAME=?,CREDIT_ABBR=?,CREDIT_TYPE=?,CREDIT_PAYFLAG=?,CREDIT_APPLICABLE_ARREARS=?,CREDIT_FORMULA=?,CREDIT_TAXABLE_FLAG=?,CREDIT_PERIODICITY=?,"
			+" CREDIT_PRIORITY=?,CREDIT_APPLICABLE_PTAX=?,CREDIT_APPLICABLE_ESI=?,CREDIT_ISEXEMPT =?"
			+" , CREDIT_EXEMPT_INV_CODE=?, CREDIT_HEAD_TYPE=?, CREDIT_IS_CTC_COMPONENT=?, CREDIT_APPLICABLE_LWF=?,CREDIT_MAXCAP=? WHERE CREDIT_CODE=?";

		case 3:
			return " DELETE FROM HRMS_CREDIT_HEAD WHERE CREDIT_CODE=?";

		case 4:
			return " SELECT CREDIT_CODE,NVL(CREDIT_NAME,''),NVL(CREDIT_ABBR,''),CREDIT_TYPE, "
					+ " CREDIT_PAYFLAG,CREDIT_APPLICABLE_ARREARS, "
					+ " NVL(CREDIT_FORMULA,' '),CREDIT_TAXABLE_FLAG,CREDIT_PERIODICITY,CREDIT_PRIORITY, "
					+ " CREDIT_APPLICABLE_PTAX,CREDIT_APPLICABLE_ESI ,CREDIT_ISEXEMPT, CREDIT_EXEMPT_INV_CODE,HRMS_TAX_INVESTMENT.INV_NAME "
					+ " ,'', CREDIT_HEAD_TYPE, CREDIT_IS_CTC_COMPONENT,CREDIT_APPLICABLE_LWF,NVL(CREDIT_MAXCAP,0) FROM HRMS_CREDIT_HEAD  "
					+ "  LEFT JOIN HRMS_TAX_INVESTMENT ON (HRMS_CREDIT_HEAD.CREDIT_EXEMPT_INV_CODE=HRMS_TAX_INVESTMENT.INV_CODE) "
					+ " WHERE CREDIT_CODE=? ORDER BY CREDIT_CODE ";

		case 5:
			return "SELECT CREDIT_CODE,NVL(CREDIT_NAME,''),NVL(CREDIT_ABBR,''),NVL(DECODE(CREDIT_TYPE,1,'Fixed',2,'Formula',3,'Slab'),' '), "
					+ " NVL(CREDIT_MAXCAP,'0'),NVL(CREDIT_MINFLOOR,'0'), "
					+ " NVL(DECODE(CREDIT_ROUNDOF,1,'Nearest Amount',2,'Higher Amount if the fraction is more than 50 basis point',3,'Lower Amount if the fraction is less than or equal to 50 basis point',4,'Nearest Tens',5,'Nearest Hundreds',6,'Nearest Thousands',7,'Nearest Ten Thousands',8,'No Rounding off'),'NO'), "
					+ " NVL(DECODE(CREDIT_PAYFLAG,'Y','Yes','N','No'),' ')  FROM HRMS_CREDIT_HEAD ORDER BY CREDIT_CODE";

		case 6:
			return " SELECT CREDIT_CODE,NVL(CREDIT_NAME,''),NVL(CREDIT_ABBR,''),NVL(CREDIT_FORMULA,' '),CREDIT_TYPE, CREDIT_PAYFLAG,CREDIT_APPLICABLE_ARREARS,"
					+ " CREDIT_TAXABLE_FLAG,CREDIT_PERIODICITY,CREDIT_PRIORITY FROM HRMS_CREDIT_HEAD ORDER BY CREDIT_CODE ";

		case 7:
			return "SELECT CREDIT_CODE,NVL(CREDIT_NAME,''),NVL(CREDIT_ABBR,''),NVL(CREDIT_FORMULA,' '), "
					+ " NVL(DECODE(CREDIT_TYPE,1,'Fixed',2,'Formula',3,'Slab'),' '),"
					+ " NVL(DECODE(CREDIT_PAYFLAG,'Y','Yes','N','No'),' '),"
					+ "  NVL(DECODE(CREDIT_APPLICABLE_ARREARS,'Y','Yes','N','No'),' '),"
					+ "  NVL(DECODE(CREDIT_TAXABLE_FLAG,'Y','Yes','N','No'),' '),"
					+ "  NVL(DECODE(CREDIT_PERIODICITY,'M','Monthly','Q','Quarterly','A','Annually','H','Half Yearly'),''),"
					+ " CREDIT_PRIORITY,"
					+ "  NVL(DECODE(CREDIT_APPLICABLE_PTAX,'Y','Yes','N','No'),' '),"
					+ "  NVL(DECODE(CREDIT_APPLICABLE_ESI,'Y','Yes','N','No'),' '),'',"
					+ "  NVL(DECODE(CREDIT_APPLICABLE_LWF,'Y','Yes','N','No'),' ')"
					+ " FROM HRMS_CREDIT_HEAD order by CREDIT_CODE";

		default:
			return "Framework could not EXECUTE the query number specified";
		}
	}
}
