package org.paradyne.sql.Training;

import org.paradyne.lib.SqlBase;

public class TrainingRequestModelSql extends SqlBase {
	
	public String getQuery(int id){
		switch (id)
		{
		case 1 : return "  INSERT INTO HRMS_TRN_REQ (TRN_REQ_CODE, TRN_REQ_DATE, TRN_SUB, TRN_REQ_FOR, REQ_BY_CODE, "
						+"TRN_STATUS, TRN_REQ_LEVEL, TRN_REQ_APPROVER)" 
						+" VALUES((SELECT NVL(MAX(TRN_REQ_CODE),0)+1 FROM HRMS_TRN_REQ), TO_DATE(?,'DD-MM-YYYY'), "
						+"?, ?, ?, 'P', 1, ?)";

		case 2 : return  " DELETE FROM HRMS_TRN_REQ WHERE TRN_REQ_CODE=?"; 
		
		case 3 : return " UPDATE HRMS_TRN_REQ SET TRN_REQ_DATE=?,TRN_REQ_DATE=,TO_DATE(?,'DD-MM-YYYY'),TRN_SUB=?,TRN_REQ_FOR=?,REQ_BY_CODE=?,TRN_STATUS=? WHERE TRN_REQ_CODE=?";

		case 4 : return " SELECT TRN_REQ_CODE,TO_CHAR(TRN_REQ_DATE,'DD-MM-YYYY'),TRN_SUB,TRN_REQ_FOR FROM HRMS_TRN_REQ ";

		case 5 : return "SELECT DISTINCT HRMS_EMP_OFFC.EMP_ID,EMP_DOB,HRMS_TITLE.TITLE_NAME||' ' ||EMP_FNAME,EMP_MNAME,EMP_LNAME,"+
						 " TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(SERVICE_FROM_DATE,'YYYY') FROM HRMS_EMP_OFFC"+
						 " INNER JOIN HRMS_EMP_SERVICE ON(HRMS_EMP_SERVICE.EMP_ID=HRMS_EMP_OFFC. EMP_ID)"+
						 "LEFT JOIN HRMS_TITLE ON (HRMS_EMP_OFFC.EMP_TITLE_CODE = HRMS_TITLE.TITLE_CODE) "+
						 " WHERE HRMS_EMP_OFFC.EMP_ID=8470 AND "+
						 " TO_CHAR(SERVICE_FROM_DATE,'DD-MM-YYYY')=(SELECT MAX(TO_CHAR(SERVICE_FROM_DATE,'DD-MM-YYYY'))"+
						 " FROM HRMS_EMP_SERVICE WHERE EMP_ID=8470)";
		
		case 6 : return "SELECT TRN_STATUS FROM HRMS_TRN_REQ WHERE TRN_REQ_CODE=?";
		
		case 7 : return "SELECT HRMS_EMP_OFFC.EMP_ID, (HRMS_TITLE.TITLE_NAME||' ' ||HRMS_EMP_OFFC.EMP_FNAME||' '||HRMS_EMP_OFFC.EMP_MNAME|| ' ' || HRMS_EMP_OFFC.EMP_LNAME), EMP_TOKEN "
						+"FROM HRMS_EMP_OFFC "
						+"LEFT JOIN HRMS_TITLE ON (HRMS_EMP_OFFC.EMP_TITLE_CODE = HRMS_TITLE.TITLE_CODE) "
						+"WHERE EMP_ID = ?";
		
		case 8 : return "SELECT TRN_REQ_CODE, REQ_BY_CODE, (HRMS_TITLE.TITLE_NAME||' ' ||EMP_FNAME ||' '|| EMP_MNAME ||' '||EMP_LNAME)NAME , TO_CHAR(TRN_REQ_DATE,'DD-MM-YYYY'), EMP_TOKEN " 
						+"FROM HRMS_TRN_REQ "
						+"INNER JOIN HRMS_EMP_OFFC ON (HRMS_TRN_REQ.REQ_BY_CODE= HRMS_EMP_OFFC.EMP_ID) " 
						+"LEFT JOIN HRMS_TITLE ON (HRMS_EMP_OFFC.EMP_TITLE_CODE = HRMS_TITLE.TITLE_CODE) "
						+"WHERE TRN_REQ_CODE= ?";
		
		case 9 : return "SELECT TRN_SUB, TRN_REQ_FOR, NVL(TRN_STATUS, 'P'), TRN_REQ_LEVEL "
						+"FROM HRMS_TRN_REQ WHERE TRN_REQ_CODE = ?";
		
		case 10 : return "SELECT TRN_REQ_CODE, EMP_CODE, (HRMS_TITLE.TITLE_NAME||' ' ||EMP_FNAME ||' '|| EMP_MNAME ||' '||EMP_LNAME)NAME, AGE, SERVICE_PERIOD, EMP_TOKEN "
						+"FROM HRMS_TRN_DTL "
						+"INNER JOIN HRMS_EMP_OFFC ON (HRMS_TRN_DTL.EMP_CODE= HRMS_EMP_OFFC.EMP_ID) "
						+"LEFT JOIN HRMS_TITLE ON (HRMS_EMP_OFFC.EMP_TITLE_CODE = HRMS_TITLE.TITLE_CODE) "
						+"WHERE TRN_REQ_CODE= ?";
		
		case 11 : return "SELECT TO_CHAR(TRN_REQ_DATE,'DD-MM-YYYY'), TRN_SUB,TRN_REQ_FOR, "
						+"HRMS_TITLE.TITLE_NAME||' ' ||EMP_FNAME||' '||EMP_MNAME||' '||EMP_LNAME , "
						+"DECODE(TRN_STATUS, 'A','Approved', 'P', 'Pending') "
						+"FROM HRMS_TRN_REQ "
						+"LEFT JOIN HRMS_EMP_OFFC ON(HRMS_EMP_OFFC.EMP_ID = HRMS_TRN_REQ.REQ_BY_CODE) "
						+"LEFT JOIN HRMS_TITLE ON (HRMS_EMP_OFFC.EMP_TITLE_CODE = HRMS_TITLE.TITLE_CODE) "
						+"WHERE TRN_REQ_CODE = ? ";
		
		case 12 : return "SELECT (HRMS_TITLE.TITLE_NAME||' ' ||EMP_FNAME ||' '|| EMP_MNAME ||' '||EMP_LNAME)NAME, "
						+"AGE, SERVICE_PERIOD "
						+"FROM HRMS_TRN_DTL "
						+"INNER JOIN HRMS_EMP_OFFC ON (HRMS_TRN_DTL.EMP_CODE= HRMS_EMP_OFFC.EMP_ID) "
						+"LEFT JOIN HRMS_TITLE ON (HRMS_EMP_OFFC.EMP_TITLE_CODE = HRMS_TITLE.TITLE_CODE) "
						+"WHERE TRN_REQ_CODE= ?";

		default : return "Framework could not EXECUTE the query number specified";			

		}
	 }

}
