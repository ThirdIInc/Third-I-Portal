/**
 * 
 */
package org.paradyne.model.common;

import java.util.Vector;

import javax.servlet.http.HttpServletRequest;

import org.paradyne.bean.admin.master.PFParameterMaster;
import org.paradyne.bean.common.ApplCodeTemplate;
import org.paradyne.lib.ModelBase;
import org.paradyne.lib.SqlBase;

/**
 * @author AA0554
 *
 */
public class ApplCodeTemplateModel extends ModelBase {
	org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(org.paradyne.model.common.ApplCodeTemplateModel.class);
	public void getTemplateDetails(ApplCodeTemplate bean, HttpServletRequest request){
		
		Object tempObj [][]= getSqlModel().getSingleResult(getQuery(3),new Object[]{bean.getApplicationType()});
		
		try{
		if (tempObj != null || tempObj.length > 0) {
			bean.setTemplateId(checkNull(String.valueOf(tempObj[0][0])));
			bean.setTemplateName(checkNull((String.valueOf(tempObj[0][1])).replaceAll("<#", "").replaceAll("#>", "")));
			bean.setHiddenTemplateName(String.valueOf(tempObj[0][1]));
			bean.setAutoGenIdType(String.valueOf(tempObj[0][2]));
			bean.setResetType(String.valueOf(tempObj[0][3]));
			bean.setAutoIdDigits(checkNull(String.valueOf(tempObj[0][4])));
			if(String.valueOf(tempObj[0][1]).contains("<#AUTOGENERATED ID#>")){
				bean.setAutoIdFlag("true");
			}
			bean.setTemplateQuery(checkNull(String.valueOf(tempObj[0][5])));
			bean.setApplCodeType(checkNull(String.valueOf(tempObj[0][6])));
			bean.setDeleteTempl("true");
		}else{
			bean.setDeleteTempl("false");
		}
	}catch (Exception e) {
		// TODO: handle exception
	}
	}
	public boolean save(ApplCodeTemplate bean){
		boolean result= false;
		if(bean.getTemplateId().equals("")){
			Object [][]maxTempId = getSqlModel().getSingleResult("SELECT NVL(MAX(APPL_CODE_TEMPLATE_ID),0) +1 FROM HRMS_APPL_CODE_TEMPLATE");
			String tempId ="1";
			if(maxTempId!=null || maxTempId.length > 0){
				tempId = String.valueOf(maxTempId[0][0]);
			}
			if(tempId==null || tempId.equals("null"))
				tempId ="1";
			Object addObj [][]= new Object [1][8];
			if(bean.getApplCodeType().equals("Q")){
				
				addObj [0][0] = tempId;
				addObj [0][1] = "";
				addObj [0][2] = bean.getApplicationType();
				addObj [0][3] = "";
				addObj [0][4] = "";
				addObj [0][5] = "";
				addObj [0][6] = bean.getTemplateQuery();
				addObj [0][7] = "Q";
				
			}else{
				addObj [0][0] = tempId;
				addObj [0][1] = bean.getHiddenTemplateName();
				addObj [0][2] = bean.getApplicationType();
				addObj [0][3] = bean.getAutoGenIdType();
				addObj [0][4] = bean.getResetType();
				addObj [0][5] = bean.getAutoIdDigits();
				addObj [0][6] = "";
				addObj [0][7] = "T";
			}
			for (int i = 0; i < addObj[0].length; i++) {
				logger.info("addObj [0]["+i+"]==="+addObj[0][i]);
			}
			result = getSqlModel().singleExecute(getQuery(1),addObj);
			if (result)
				bean.setTemplateId(tempId);
		} else {
			Object updateObj[][] = new Object[1][7];
			if (bean.getApplCodeType().equals("Q")) {
				updateObj[0][0] = "";
				updateObj[0][1] = bean.getAutoGenIdType();
				updateObj[0][2] = "";
				updateObj[0][3] = "";
				updateObj[0][4] = bean.getTemplateQuery();
				updateObj[0][5] = "Q";
				updateObj[0][6] = bean.getTemplateId();
			} else {

				updateObj[0][0] = bean.getHiddenTemplateName();
				updateObj[0][1] = bean.getAutoGenIdType();
				updateObj[0][2] = bean.getResetType();
				updateObj[0][3] = bean.getAutoIdDigits();
				updateObj[0][4] = "";
				updateObj[0][5] = "T";
				updateObj[0][6] = bean.getTemplateId();

			}
			result = getSqlModel().singleExecute(getQuery(2), updateObj);
		}
		/*if(result && !(bean.getApplicationType().equals("Default"))){
			result= addQuery(bean);
			//result = updateDTL(bean);
		}*/
		return result;
	}
	public boolean addQuery(ApplCodeTemplate bean){
		String applnType = bean.getApplicationType();
		String query ="";
		String appl_code ="",emp_id="",appl_date="",table_name="";
		if(applnType.equals("Default")){
			
		}	//end of if
		if(applnType.equals("Leave")){
			appl_code ="LEAVE_APPL_CODE";
			emp_id="EMP_ID";
			appl_date="LEAVE_APPL_DATE";
			table_name="HRMS_LEAVE_HDR";
		}	//end of if
		
		else if(applnType.equals("Cash")){
			appl_code ="VOUCHER_APPL_CODE";
			emp_id="EMP_CODE";
			appl_date="APP_DATE";
			table_name="HRMS_VOUCHER_APPL";
		}	//end of elseif
		
		else if(applnType.equals("Sugg")){
			appl_code ="SUGGESTION_CODE";
			emp_id="SUGGETION_EMP_ID";
			appl_date="SUGGESTION_DATE";
			table_name="HRMS_SUGGESTION";
		}	//end of elseif
		
		else if(applnType.equals("Help")){
			appl_code ="HELP_CODE";
			emp_id="HELP_EMP_CODE";
			appl_date="HELP_APPLIED_DATE";
			table_name="HRMS_HELP";
		}	//end of elseif
		
		/*else if(applnType.equals("Other")){
			appl_code ="ADV_CODE";
			emp_id="EMP_ID";
			appl_date="ADV_DATE";
			table_name="HRMS_ADVANCE_HDR";
		}	//end of elseif
		else if(applnType.equals("CTF")){
			appl_code ="CHILD_APP_CODE";
			emp_id="EMP_ID";
			appl_date="CHILD_APP_DATE";
			table_name="HRMS_CHILD_HDR";
		}	//end of elseif
		*/
		else if(applnType.equals("Confere")){
			appl_code ="CONF_CODE";
			emp_id="CONF_DATE";
			appl_date="CONF_BOOKEDBY";
			table_name="HRMS_CONF_HDR";
		}	//end of elseif
		
		else if(applnType.equals("Loan")){
			appl_code ="LOAN_APPL_CODE";
			emp_id="LOAN_EMP_ID";
			appl_date="LOAN_APPL_DATE";
			table_name="HRMS_LOAN_APPLICATION";
		}	//end of elseif
		
		else if(applnType.equals("Asset")){
			appl_code ="ASSET_APPL_CODE";
			emp_id="ASSET_EMP_ID";
			appl_date="ASSET_APPL_DATE";
			table_name="HRMS_ASSET_APPLICATION";
		}	//end of elseif
		
		else if(applnType.equals("Purchase")){
			appl_code ="PURCHASE_CODE";
			emp_id="PURCHASE_EMP_CODE";
			appl_date="PURCHASE_ORDER_DATE";
			table_name="HRMS_ASSET_PURCHASE_HDR";
		}	//end of elseif
		
		else if(applnType.equals("Tran")){
			appl_code ="";
			emp_id="";
			appl_date="";
			table_name="";
		}	//end of elseif
		
		else if(applnType.equals("TYD")){
			appl_code ="";
			emp_id="";
			appl_date="";
			table_name="";
		}	//end of elseif
		
		
		query = "SELECT MAX("+appl_code+") FROM "+table_name
				+" LEFT JOIN HRMS_EMP_OFFC ON(HRMS_EMP_OFFC.EMP_ID="+table_name+"."+emp_id+")"
				+" WHERE 1=1";
		if(bean.getAutoGenIdType().equals("Division")){
			query+=" AND EMP_DIV=?";
		}else if(bean.getAutoGenIdType().equals("Branch")){
			query+=" AND EMP_CENTER=?";
		}else if(bean.getAutoGenIdType().equals("Department")){
			query+=" AND EMP_DEPT=?";
		}
		if(bean.getResetType().equals("M")){
			query +=" AND TO_CHAR("+appl_date+",'MM-YYYY')=?";
		}else if(bean.getResetType().equals("Y")){
			query +=" AND TO_CHAR("+appl_date+",'YYYY')=?";
		}
				/*+" LEFT JOIN HRMS_DIVISION ON (HRMS_DIVISION.DIV_ID=HRMS_EMP_OFFC.EMP_DIV)"
				+" LEFT JOIN HRMS_CENTER ON (HRMS_CENTER.CENTER_ID=HRMS_EMP_OFFC.EMP_CENTER)"
				+" LEFT JOIN HRMS_DEPT ON(HRMS_DEPT.DEPT_ID=HRMS_EMP_OFFC.EMP_DEPT)";*/
		Object updateObj [][]= new Object[1][2];
		updateObj [0][0] = query;
		updateObj [0][1] = bean.getTemplateId();
		
		return getSqlModel().singleExecute(getQuery(4),updateObj);
	}
	public String getTemplateBasedCode(String empId,String applDate,Object [][]tempObj,String autoGenId){

		String dateObj [] = applDate.split("-");
		String applnCode ="";
		//Object dateObj [][]=getSqlModel().getSingleResult("SELECT TO_CHAR(SYSDATE,'MM'),TO_CHAR(SYSDATE,'YYYY') FROM DUAL");
		
		String empDetQuery ="SELECT DIV_ID, DIV_ABBR, CENTER_ID, CENTER_ABBR, DEPT_ID, DEPT_ABBR,UPPER(NVL(SUBSTR(EMP_FNAME,1,1),' '))," 
							+" UPPER(NVL(SUBSTR(EMP_LNAME,1,1),' ')) FROM HRMS_EMP_OFFC"
							+" LEFT JOIN HRMS_DIVISION ON (HRMS_DIVISION.DIV_ID=HRMS_EMP_OFFC.EMP_DIV)"
							+" LEFT JOIN HRMS_CENTER ON (HRMS_CENTER.CENTER_ID=HRMS_EMP_OFFC.EMP_CENTER)"
							+" LEFT JOIN HRMS_DEPT ON(HRMS_DEPT.DEPT_ID=HRMS_EMP_OFFC.EMP_DEPT)"
							+" WHERE EMP_ID="+empId;
		Object empDetails [][]=getSqlModel().getSingleResult(empDetQuery);
		
		try {
			
			if(String.valueOf(tempObj[0][1]).contains("<#AUTOGENERATED ID#>")){
				autoGenId = getAutoGeneratedId(tempObj, empDetails, dateObj);
			}
			if (tempObj != null || tempObj.length > 0) {
				applnCode = String.valueOf(tempObj[0][1]);
				applnCode = applnCode.replaceAll("<#MONTH#>", String.valueOf(dateObj[1]));
				applnCode = applnCode.replaceAll("<#YEAR#>", String.valueOf(dateObj[2]));
				applnCode = applnCode.replaceAll("<#DIVISION#>", checkNull(String.valueOf(empDetails[0][1])));
				applnCode = applnCode.replaceAll("<#BRANCH#>", checkNull(String.valueOf(empDetails[0][3])));
				applnCode = applnCode.replaceAll("<#DEPARTMENT#>", checkNull(String.valueOf(empDetails[0][5])));
				applnCode = applnCode.replaceAll("<#AUTOGENERATED ID#>",autoGenId);
				applnCode = applnCode.replaceAll("<#FNAME INITIAL#>",checkNull(String.valueOf(empDetails[0][6])));
				applnCode = applnCode.replaceAll("<#LNAME INITIAL#>",checkNull(String.valueOf(empDetails[0][7])));
				applnCode = applnCode.replaceAll("<#", "").replaceAll("#>", "");
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		logger.info("final applnCode==="+applnCode);
		/*if(applnCode.equals("")){
			applnCode = applnType+"_"+applnId;
		}*/
		return applnCode ;
	}
	public String generateApplicationCode(String applnId, String applnType,String empId,String applDate){
		String applnCode ="";
		logger.info("inside generateApplicationCode ==="+applnCode);
		Object tempObj [][]= null;
		String autoGenId ="";
		tempObj = getSqlModel().getSingleResult(getQuery(3),new Object[]{applnType});
		if(tempObj == null || tempObj.length <= 0){
			//tempObj = getSqlModel().getSingleResult(getQuery(3),new Object[]{"Default"});
			autoGenId =applnId;
		}else{
			if(String.valueOf(tempObj[0][6]).equals("Q")){
				applnCode = getQueryBasedCode(applnId,tempObj,autoGenId);
			}else{
				applnCode = getTemplateBasedCode(empId,applDate,tempObj,autoGenId);
			}
			
		}
		return applnCode;
	}
	
	/*public String getAutoGeneratedId(Object tempObject[][],Object [][]empDetails,Object [][] dateObj,String autoGenId){
		
		try{
		String query = String.valueOf(tempObject[0][4]);
		Object autoIdObj[][]=null;
		Vector param = new Vector();
		String autoIdType = String.valueOf(tempObject[0][2]);
		String resetType = String.valueOf(tempObject[0][3]);
		
		if (autoIdType.equals("Division")) {
			param.add(empDetails[0][0]);
		} else if (autoIdType.equals("Branch")) {
			param.add(empDetails[0][2]);
		} else if (autoIdType.equals("Department")) {
			param.add(empDetails[0][4]);
		}

		if (resetType.equals("Y")) {
			param.add(dateObj[0][1]);
		} else if (resetType.equals("M")) {
			param.add(dateObj[0][0] + "-" + dateObj[0][1]);
		}
		
		//logger.info("param.size()==="+param.size());
		
		if(param.size()==0){
		 autoIdObj = getSqlModel().getSingleResult(query);
		}else{
			Object []paramObj = new Object [param.size()];
			for (int i = 0; i < paramObj.length; i++) {
				paramObj [i]= param.get(i);
				//logger.info("paramObj["+i+"]"+paramObj[i]);
			}
			autoIdObj = getSqlModel().getSingleResult(query,paramObj);
		}
		
		try {
			if (Integer.parseInt(String.valueOf(autoIdObj[0][0])) < 10) {
				autoGenId = "0" + String.valueOf(autoIdObj[0][0]);
			} else {
				autoGenId = String.valueOf(autoIdObj[0][0]);
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			autoGenId ="01";
		}
		}catch (Exception e) {
			// TODO: handle exception
		}
		logger.info("autoGenId==="+autoGenId);
		return autoGenId;
	}*/
	public String getQueryBasedCode(String applId,Object [][]tempObj,String autoGenId){

		String applnCode =applId;
		
		String applCodeQuery=String.valueOf(tempObj[0][5]);
		Object []applCodePara=new Object[1];
		applCodePara[0] = applId;
		
		logger.info("applId======"+applId+"and applCodeQuery=="+applCodeQuery);
		Object [][]applCodeObj=getSqlModel().getSingleResult(applCodeQuery,applCodePara);
		try{
			if(applCodeObj!=null || !(applCodeObj.equals("null")) || applCodeObj.length >0){
				applnCode = String.valueOf(applCodeObj[0][0]);
			}
		}catch (Exception e) {
			applnCode =applId;
		}
		return applnCode ;
	}
public String getAutoGeneratedId(Object templObject[][],Object [][]empDetails,String [] dateObj){
		
	String autoGenId="";
		try{
			
			boolean fNameFlag=false;
			boolean lNameFlag=false;
			
		String autoIdType = (String.valueOf(templObject[0][2])).substring(0, 2).toUpperCase();
		String resetType = String.valueOf(templObject[0][3]);
		String typeId = "";
		String resetValue = "";
		
		
		/*
		 * checking the Auto Id type(branchwise or Dept wise or Div-wise or name-wise) & setting the value of TypeId
		 */
		if (autoIdType.equals("DI")) {
			typeId= String.valueOf(empDetails[0][0]);
		} 
		else if (autoIdType.equals("BR")) {
			typeId= String.valueOf(empDetails[0][2]);
		} 
		else if (autoIdType.equals("DE")) {
			typeId= String.valueOf(empDetails[0][4]);
		}
		else if (autoIdType.equals("FI")) {
				typeId= String.valueOf(empDetails[0][6]);
				fNameFlag =true;
		}
		else if (autoIdType.equals("LA")) {
				typeId= String.valueOf(empDetails[0][7]);
				lNameFlag =true;
		}else{
			typeId="0";
		}

		/*
		 * checking the Auto Id reset type(monthly or yearly(calendar year/Financial year) or no reset) & setting the value of reset
		 */
		
		if (resetType.equals("Y")) {						// reset calendar year-wise
			resetValue = String.valueOf(dateObj[2]);
			
		}else if (resetType.equals("F")) {				// reset financial year-wise 
			if(Integer.parseInt(String.valueOf(dateObj[1]))< 4)
				resetValue = String.valueOf(Integer.parseInt(String.valueOf(dateObj[2]))-1);
			else
				resetValue = String.valueOf(dateObj[2]);
		} 
		else if (resetType.equals("M")) {						// reset month-wise				
			resetValue = dateObj[1] + "-" + dateObj[2];
		}
		else{											// No reset
			resetValue = "No Reset";
		}
		
		
		
		String typeIdCol="APPL_AUTOGEN_TYPE_ID";
		//logger.info("param.size()==="+param.size());
		
		if(fNameFlag){
			typeIdCol = "APPL_AUTOGEN_FNAME";
		}else if(lNameFlag){
			typeIdCol = "APPL_AUTOGEN_LNAME";
		}
		String query = "SELECT APPL_AUTOGEN_ID_COUNT "
						+" FROM HRMS_APPL_CODE_TEMPLATE_DTL WHERE APPL_AUTOGEN_TYPE =?" 
						+" AND "+typeIdCol+"=? AND APPL_AUTOGEN_RESET_TYPE=? AND APPL_AUTOGEN_RESET_VALUE=? AND APPL_CODE_TEMPLATE_ID=?";
		
		Object queryParam[]= new Object[5];
		
		//queryParam[0] = String.valueOf(templObject[0][0]);					//template Id
		queryParam[0] = autoIdType;							// autogen ID type(i.e. DI, BR or DP)
		queryParam[1] = typeId;								// // Division , branch, FName, LName or Department ID
		queryParam[2] = resetType;							// reset type(Monthly or yearly)
		queryParam[3] = resetValue;							// reset value(month & year)
		queryParam[4] = templObject[0][0];							// reset value(month & year)
		
		
		Object [][]autoIdCount = getSqlModel().getSingleResult(query,queryParam);
		
		if(autoIdCount == null || autoIdCount.length <=0){
			String insertDTLQuery = "INSERT INTO HRMS_APPL_CODE_TEMPLATE_DTL(APPL_CODE_TEMPLATE_ID, "+typeIdCol+", APPL_AUTOGEN_TYPE, APPL_AUTOGEN_ID_COUNT, APPL_AUTOGEN_RESET_TYPE, APPL_AUTOGEN_RESET_VALUE) VALUES(?,?,?,1,?,?)";	
			Object [][]insertObj = new Object[1][5];
			insertObj[0][0] = templObject[0][0];					//template Id
			insertObj[0][1] = typeId;							// // Division , branch, FName, LName or Department ID
			insertObj[0][2] = autoIdType;								// autogen ID type(i.e. DI, BR or DP)
			insertObj[0][3] = resetType;							// reset type(Monthly or yearly)
			insertObj[0][4] = resetValue;							// reset value(month & year)
			
			getSqlModel().singleExecute(insertDTLQuery, insertObj);
			autoGenId = "1";
		}
		else{
			autoGenId = ""+(Integer.parseInt(String.valueOf(autoIdCount[0][0]))+1);
			String updateDTLQuery = "UPDATE HRMS_APPL_CODE_TEMPLATE_DTL SET APPL_AUTOGEN_ID_COUNT = ? "
								+" WHERE "+typeIdCol+"=? AND APPL_AUTOGEN_TYPE=? AND "
								+" APPL_AUTOGEN_RESET_TYPE=? AND APPL_AUTOGEN_RESET_VALUE=? AND APPL_CODE_TEMPLATE_ID="+templObject[0][0]+" ";
			
			Object [][]updateObj = new Object[1][5];
			updateObj[0][0] = autoGenId;	
			//updateObj[0][1] = String.valueOf(templObject[0][0]);					//template Id
			updateObj[0][1] = typeId;							// Division , branch or Department ID
			updateObj[0][2] = autoIdType;								// autogen ID type(i.e. DI, BR or DP)
			updateObj[0][3] = resetType;							// reset type(Monthly or yearly)
			updateObj[0][4] = resetValue;							// reset value(month & year)
			
			getSqlModel().singleExecute(updateDTLQuery, updateObj);
			
		}
		String zeroString="";
		try{
		if(!checkNull(String.valueOf(templObject[0][4])).equals("")){
			int noOfDigits=Integer.parseInt(String.valueOf(templObject[0][4]));
			
			if(noOfDigits>autoGenId.length()){
			
			for (int i = 0; i <noOfDigits-autoGenId.length() ; i++) {
				zeroString+="0";
			}
			}
		
			autoGenId =zeroString+autoGenId;
		}
		}catch (Exception e) {
			logger.error("exception while appending zero's in the autoGenId"+e);
		}
		
		}catch (Exception e) {
			// TODO: handle exception
		}
		logger.info("autoGenId==="+autoGenId);
		return autoGenId;
	}
	public boolean delete(ApplCodeTemplate bean){
		boolean result = false;
		 result = getSqlModel().singleExecute("DELETE FROM HRMS_APPL_CODE_TEMPLATE WHERE APPL_CODE_TEMPLATE_ID="+bean.getTemplateId());
		return result;
	}
	/** Method name-- checkNull
	 * parameters---  String result
	 * return type--  String
	 * Purpose ---    To check whether the value is null or not
	 */
	public String checkNull(String result) {
		if (result == null || result.equals("null")) {
			return "";
		}	//end of if 
		else {
			return result;
		}	//end of else
	}
}
